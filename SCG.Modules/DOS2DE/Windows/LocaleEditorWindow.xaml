<reactiveui:ReactiveWindow 
		xmlns:reactiveui="http://reactiveui.net"
		x:Class="SCG.Modules.DOS2DE.Windows.LocaleEditorWindow"
		x:TypeArguments="data:LocaleViewModel"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:local="clr-namespace:SCG.Modules.DOS2DE.Windows"
		xmlns:data="clr-namespace:SCG.Modules.DOS2DE.Data.View.Locale"
		xmlns:vdata="clr-namespace:SCG.Data.View;assembly=SourceControlGenerator"
		xmlns:core="clr-namespace:SCG.Modules.DOS2DE.Core"
		xmlns:util="clr-namespace:SCG.Modules.DOS2DE.Utilities"
		xmlns:conv="clr-namespace:SCG.Converters;assembly=SourceControlGenerator"
		xmlns:win="clr-namespace:SCG.Windows;assembly=SourceControlGenerator"
		xmlns:c="clr-namespace:SCG.Controls;assembly=SourceControlGenerator"
		xmlns:cb="clr-namespace:SCG.Controls.Behavior;assembly=SourceControlGenerator"
		xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
		xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
		mc:Ignorable="d"
		d:DataContext="{d:DesignInstance data:LocaleEditorDesignData, IsDesignTimeCreatable=True}"
		Closing="LocaleWindow_Closing"
		Title="{Binding WindowTitle, FallbackValue='Localization Editor'}" Height="525" Width="960">
	<Window.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="pack://application:,,,/SourceControlGenerator;component/ThemeSystem/ResourceDictionary/MainAppDictionary.xaml" />
				<ResourceDictionary Source="pack://application:,,,/SourceControlGenerator;component/ThemeSystem/ResourceDictionary/ScrollbarStyles.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<util:LocalizationTextFormatter x:Key="LocalizationTextFormatter" />

			<Style x:Key="ShortcutButton" TargetType="Button">
				<Setter Property="MinHeight" Value="16" />
				<Setter Property="MinWidth" Value="16" />
				<Setter Property="MaxHeight" Value="16" />
				<Setter Property="MaxWidth" Value="16" />
				<Setter Property="BorderBrush" Value="{x:Null}"/>
				<Setter Property="BorderThickness" Value="0"/>
				<Setter Property="Background" Value="Transparent"/>

				<Setter Property="Content">
					<Setter.Value>
						<Style TargetType="Image">
							<Setter Property="Stretch" Value="UniformToFill" />
							<Style.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Source">
										<Setter.Value>
											<Binding Path="Source" RelativeSource="{RelativeSource Self}">
												<Binding.Converter>
													<conv:GrayscaleTintImageConverter />
												</Binding.Converter>
											</Binding>
										</Setter.Value>
									</Setter>
								</Trigger>
							</Style.Triggers>
						</Style>
					</Setter.Value>
				</Setter>

				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Foreground" Value="Transparent"/>
						<Setter Property="Background" Value="Transparent"/>
						<Setter Property="BorderBrush" Value="{x:Null}"/>
						<Setter Property="BorderThickness" Value="0"/>
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="ButtonImage" TargetType="Image">
				<Setter Property="Stretch" Value="UniformToFill" />
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Source">
							<Setter.Value>
								<Binding>
									<Binding.Converter>
										<conv:GrayscaleTintImageConverter />
									</Binding.Converter>
								</Binding>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>

			<SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
			<SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
			<Grid x:Key="KeyActionsGrid" Background="#FFD0FFD0" >
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>
				<StackPanel Orientation="Horizontal" Grid.Column="1" Margin="2">
					<StackPanel.Resources>
						<Style TargetType="{x:Type Button}">
							<Setter Property="Focusable" Value="False" />
						</Style>
					</StackPanel.Resources>
					<Button Padding="0" Margin="2"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_InsertFontText}"
						Command="{Binding Path=DataContext.AddFontTagCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						IsEnabled="{Binding Path=DataContext.ContentFocused, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
					>
						<Button.Content>
							<Label Content="&lt;font&gt;" FontSize="8" Margin="0" />
						</Button.Content>
					</Button>
					<xctk:ColorPicker x:Name="FontColorPicker" Margin="2" Width="50" Loaded="FontColorPicker_Loaded"/>
				</StackPanel>
				<StackPanel Orientation="Horizontal" Margin="2">
					<StackPanel.Resources>
						<Style TargetType="{x:Type c:ImageButton}" BasedOn="{StaticResource DefaultImageButtonStyle}">
							<Setter Property="TintColor" Value="Lime" />
							<Setter Property="Margin" Value="2" />
						</Style>
					</StackPanel.Resources>
					<TextBlock Text="Actions:" VerticalAlignment="Center" Margin="4,0,2,0" />
					<c:ImageButton
						Command="{Binding Path=DataContext.AddNewKeyCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" 
						ToolTip_Enabled="{x:Static core:DOS2DETooltips.Button_Locale_AddKey}"
						ToolTip_Disabled="{x:Static core:DOS2DETooltips.Button_Locale_AddKey_Disabled}"
						Source="{x:Static vdata:IconPathData.AddRow}"
						IsEnabled="{Binding Path=DataContext.CanAddKeys, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						cb:ImageButtonHoverOnDisabled.Enable="True"
					/>
					<c:ImageButton 
						Command="{Binding Path=DataContext.DeleteKeysCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" 
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_DeleteKeys}"
						Source="{x:Static vdata:IconPathData.DeleteTableRow}"
						IsEnabled="{Binding Path=DataContext.AnySelected, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						cb:ImageButtonHoverOnDisabled.Enable="True"
					/>
					<Rectangle Style="{StaticResource VerticalSeparator}" />
					<c:ImageButton 
						Command="{Binding Path=DataContext.GenerateHandlesCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" 
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_GenerateHandles}"
						Source="{x:Static vdata:IconPathData.RowUpdating}"
					/>
					<Rectangle Style="{StaticResource VerticalSeparator}" />
					<c:ImageButton 
						Command="{Binding Path=DataContext.ImportKeysCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						ToolTip_Enabled="{x:Static core:DOS2DETooltips.Button_Locale_ImportKeys}"
						ToolTip_Disabled="{x:Static core:DOS2DETooltips.Button_Locale_ImportKeys_Disabled}"
						Source="{x:Static vdata:IconPathData.ImportFile}"
						IsEnabled="{Binding Path=DataContext.CanAddKeys, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						cb:ImageButtonHoverOnDisabled.Enable="True"
					>
						<c:ImageButton.CommandParameter>
							<Binding Path="DataContext.CurrentEntryImportPath" RelativeSource="{RelativeSource AncestorType={x:Type Window}}"
																Converter="{StaticResource ParamsToOpenFileBrowserParamsConverter}" />
						</c:ImageButton.CommandParameter>
					</c:ImageButton>
					<Rectangle Style="{StaticResource VerticalSeparator}" />
					<c:ImageButton x:Name="ExportButton" 
						Command="{Binding Path=DataContext.ExportXMLCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_ExportToXML}" 
						Source="{x:Static vdata:IconPathData.XSLTTemplate}" 
						IsEnabled="{Binding Path=DataContext.AnySelected, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						cb:ImageButtonHoverOnDisabled.Enable="True"
					/>
				</StackPanel>
			</Grid>
			<FlowDocumentScrollViewer x:Key="EntryContentPreview" Document="{Binding Path=DataContext.SelectedEntryContent, UpdateSourceTrigger=PropertyChanged,
						RelativeSource={RelativeSource AncestorType={x:Type Window}}, Converter={StaticResource HtmlToFlowDocumentConverter}}" 
						BorderThickness="0" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto"
			>
				<FlowDocumentScrollViewer.Resources>
					<ResourceDictionary Source="pack://application:,,,/Neo.Markdig.Xaml;component/Themes/generic.xaml" />
				</FlowDocumentScrollViewer.Resources>
			</FlowDocumentScrollViewer>
			<xctk:RichTextBox 
					x:Name="EntryContentRichTextBox"
					x:Key="EntryContentRichTextBox"
					Text="{Binding Path=DataContext.SelectedEntryContent, UpdateSourceTrigger=PropertyChanged,
						RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
					TextFormatter="{StaticResource LocalizationTextFormatter}"
					GotFocus="EntryContent_GotFocus"
					LostFocus="EntryContent_LostFocus"
					SelectionChanged="EntryContent_SelectionChanged"
					Loaded="EntryContentRichTextBox_Loaded" Unloaded="EntryContentRichTextBox_Unloaded"
					BorderThickness="0" BorderBrush="{x:Null}"
					Margin="1" Block.LineHeight="2"
					Background="Transparent"
					Tag="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
					FontSize="{Binding Path=DataContext.ContentFontSize, RelativeSource={RelativeSource AncestorType={x:Type Window}}, FallbackValue=12, TargetNullValue=12}"
					AcceptsReturn="True" AcceptsTab="True"
					IsUndoEnabled="False"
					IsReadOnly="{Binding Path=DataContext.CanEditContentPreview, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
				>
				<i:Interaction.Behaviors>
					<cb:RichTextBoxSelectionBehavior SelectedText="{Binding Path=DataContext.SelectedText, Mode=OneWayToSource, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />
				</i:Interaction.Behaviors>
				<xctk:RichTextBox.ContextMenu>
					<ContextMenu>
						<MenuItem Command="ApplicationCommands.Cut" />
						<MenuItem Command="ApplicationCommands.Copy" />
						<MenuItem Command="ApplicationCommands.Paste" />
						<MenuItem Command="ApplicationCommands.SelectAll" />
						<MenuItem Header="Display Content in Separate Window" Command="{Binding Path=PlacementTarget.Tag.PopoutContentCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>
						<MenuItem Header="Toggle Light/Dark Mode"
											Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, 
													Path=PlacementTarget.Tag.ToggleContentLightModeCommand}" />
						<MenuItem Header="Font Size">
							<MenuItem Header="12" CommandParameter="12" Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.ChangeContentFontSizeCommand}" />
							<MenuItem Header="16" CommandParameter="16" Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.ChangeContentFontSizeCommand}" />
							<MenuItem Header="24" CommandParameter="24" Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.ChangeContentFontSizeCommand}" />
							<MenuItem Header="32" CommandParameter="32" Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.ChangeContentFontSizeCommand}" />
						</MenuItem>
					</ContextMenu>
				</xctk:RichTextBox.ContextMenu>
			</xctk:RichTextBox>

			<Style x:Key="LocaleGroupTabControl" TargetType="{x:Type TabControl}">
				<Setter Property="Padding" Value="0"/>
				<Setter Property="HorizontalContentAlignment" Value="Center"/>
				<Setter Property="VerticalContentAlignment" Value="Center"/>
				<Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}"/>
				<Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Border}"/>
				<Setter Property="BorderThickness" Value="0"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TabControl}">
							<Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
								<Grid.ColumnDefinitions>
									<ColumnDefinition x:Name="ColumnDefinition0"/>
									<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
									<RowDefinition x:Name="RowDefinition1" Height="*"/>
								</Grid.RowDefinitions>
								<TabPanel x:Name="headerPanel" Grid.Column="0" Grid.Row="0"
										  Background="Transparent" IsItemsHost="true" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
								<Border x:Name="groupContentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
										Grid.Column="0" Grid.Row="1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
									<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="TabStripPlacement" Value="Bottom">
									<Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
									<Setter Property="Grid.Row" TargetName="groupContentPanel" Value="0"/>
									<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
									<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
									<Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
								</Trigger>
								<Trigger Property="TabStripPlacement" Value="Left">
									<Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
									<Setter Property="Grid.Row" TargetName="groupContentPanel" Value="0"/>
									<Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
									<Setter Property="Grid.Column" TargetName="groupContentPanel" Value="1"/>
									<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
									<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
									<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
									<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
									<Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
								</Trigger>
								<Trigger Property="TabStripPlacement" Value="Right">
									<Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
									<Setter Property="Grid.Row" TargetName="groupContentPanel" Value="0"/>
									<Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
									<Setter Property="Grid.Column" TargetName="groupContentPanel" Value="0"/>
									<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
									<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
									<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
									<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
									<Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="TabControlFileData" TargetType="{x:Type TabControl}" BasedOn="{StaticResource LocaleGroupTabControl}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TabControl}">
							<Grid x:Name="templateRoot" ClipToBounds="true" 
								  SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local" ScrollViewer.VerticalScrollBarVisibility="Auto">
								<Grid.ColumnDefinitions>
									<ColumnDefinition x:Name="ColumnDefinition0"/>
									<ColumnDefinition x:Name="GridSplitter" Width="0"/>
									<ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition x:Name="RowDefinition0" Height="Auto"/>
									<RowDefinition x:Name="RowDefinition1" Height="*"/>
								</Grid.RowDefinitions>
								<GridSplitter 
									Background="LightGray"
									Grid.Column="1"
									Grid.RowSpan="3"
									VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
									Height="Auto"
									ResizeDirection="Columns" />
								<Grid Grid.Column="0" Grid.Row="0" x:Name="headerGrid">
									<ScrollViewer
										ScrollViewer.CanContentScroll="True" VerticalAlignment="Top"
										ScrollViewer.VerticalScrollBarVisibility="Auto" ScrollViewer.HorizontalScrollBarVisibility="Disabled">
										<TabPanel x:Name="headerPanel" Background="Transparent"
												  IsItemsHost="true" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"
											/>
										<ScrollViewer.Resources>
											<Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource SkinnyScrollbarStyle}">
												<Setter Property="SnapsToDevicePixels" Value="True"/>
												<Setter Property="OverridesDefaultStyle" Value="true"/>
											</Style>
										</ScrollViewer.Resources>
									</ScrollViewer>
								</Grid>
								<Border x:Name="contentPanel" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" 
										Grid.Column="0" Grid.Row="1" KeyboardNavigation.DirectionalNavigation="Contained" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local">
									<ContentPresenter x:Name="PART_SelectedContentHost" ContentSource="SelectedContent" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="TabStripPlacement" Value="Bottom">
									<Setter Property="Grid.Row" TargetName="headerGrid" Value="1"/>
									<Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
									<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
									<Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
									<Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/>
								</Trigger>
								<Trigger Property="TabStripPlacement" Value="Left">
									<Setter Property="Grid.Row" TargetName="headerGrid" Value="0"/>
									<Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
									<Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
									<Setter Property="Grid.Column" TargetName="contentPanel" Value="2"/>
									<Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
									<Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
									<Setter Property="Width" TargetName="GridSplitter" Value="1"/>
									<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
									<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
									<Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>
								</Trigger>
								<Trigger Property="TabStripPlacement" Value="Right">
									<Setter Property="Grid.Row" TargetName="headerGrid" Value="0"/>
									<Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
									<Setter Property="Grid.Column" TargetName="headerGrid" Value="1"/>
									<Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
									<Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
									<Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
									<Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
									<Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
									<Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/>
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<Style x:Key="DataGrid_NoHighlight" TargetType="DataGridCell">
				<Style.Triggers>
					<Trigger  Property="IsSelected" Value="true">
						<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
						<Setter Property="Background" Value="{x:Null}" />
						<Setter Property="BorderBrush" Value="{x:Null}" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="LocaleDataGridStyle" TargetType="{x:Type DataGrid}">
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
				<Setter Property="BorderBrush" Value="#FF688CAF"/>
				<Setter Property="BorderThickness" Value="1"/>
				<Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
				<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
				<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
				<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type DataGrid}">
							<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
								<ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
									<ScrollViewer.Template>
										<ControlTemplate TargetType="{x:Type ScrollViewer}">
											<Grid>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="Auto"/>
													<ColumnDefinition Width="*"/>
													<ColumnDefinition Width="Auto"/>
												</Grid.ColumnDefinitions>
												<Grid.RowDefinitions>
													<RowDefinition Height="Auto"/>
													<RowDefinition Height="Auto"/>
													<RowDefinition Height="*"/>
													<RowDefinition Height="Auto"/>
												</Grid.RowDefinitions>
												<Button Command="{x:Static DataGrid.SelectAllCommand}" Grid.Row="1" Focusable="false" Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle, TypeInTargetAssembly={x:Type DataGrid}}}" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
												<DataGridColumnHeadersPresenter x:Name="PART_ColumnHeadersPresenter" Grid.Row="1" Grid.Column="1" Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
												<ScrollContentPresenter x:Name="PART_ScrollContentPresenter" CanContentScroll="{TemplateBinding CanContentScroll}" Grid.ColumnSpan="2" Grid.Row="2"/>
												<ScrollBar x:Name="PART_VerticalScrollBar" Grid.Column="2" Maximum="{TemplateBinding ScrollableHeight}" Orientation="Vertical" Grid.Row="2" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportHeight}"/>
												<Grid Grid.Column="1" Grid.Row="3">
													<Grid.ColumnDefinitions>
														<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
														<ColumnDefinition Width="*"/>
													</Grid.ColumnDefinitions>
													<ScrollBar x:Name="PART_HorizontalScrollBar" Grid.Column="1" Maximum="{TemplateBinding ScrollableWidth}" Orientation="Horizontal" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" ViewportSize="{TemplateBinding ViewportWidth}"/>
												</Grid>
											</Grid>
										</ControlTemplate>
									</ScrollViewer.Template>
									<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
								</ScrollViewer>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsGrouping" Value="true"/>
							<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
						</MultiTrigger.Conditions>
						<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
					</MultiTrigger>
				</Style.Triggers>
			</Style>

			<DataTemplate x:Key="LocaleEntryGrid">
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto"/>
						<RowDefinition Height="*"/>
					</Grid.RowDefinitions>
					<ContentPresenter Content="{StaticResource KeyActionsGrid}" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" />
					<Grid Grid.Row="1">
						<Grid.Resources>
							<Style TargetType="{x:Type Border}">
								<Style.Triggers>
									<DataTrigger Binding="{Binding Path=DataContext.ContentLightMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="False">
										<Setter Property="Background" Value="DarkGray" />
									</DataTrigger>
									<DataTrigger Binding="{Binding Path=DataContext.ContentLightMode,RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="True">
										<Setter Property="Background" Value="WhiteSmoke" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
							<Style TargetType="{x:Type xctk:RichTextBox}">
								<Style.Triggers>
									<DataTrigger Binding="{Binding Path=DataContext.ContentLightMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="True">
										<Setter Property="Foreground" Value="Black" />
									</DataTrigger>
									<DataTrigger Binding="{Binding Path=DataContext.ContentLightMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="False">
										<Setter Property="Foreground" Value="White" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Grid.Resources>
						<Grid.RowDefinitions>
							<RowDefinition Height="4*" />
							<RowDefinition Height="Auto"/>
							<RowDefinition Height="*"/>
						</Grid.RowDefinitions>
						<!--<Grid.ColumnDefinitions>
							<ColumnDefinition Width="4*"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>-->
						<DataGrid x:Name="LocaleEntryDataGrid"
								GotFocus="LocaleEntryDataGrid_GotFocus"
								ItemsSource="{Binding Entries}" 
								BorderThickness="0,1,0,0"
								AutoGenerateColumns="False" 
								CanUserAddRows="False" CanUserDeleteRows="False"
								CanUserResizeRows="True"
								VirtualizingPanel.IsVirtualizingWhenGrouping="True"
								Style="{StaticResource LocaleDataGridStyle}"
						>
							<DataGrid.Resources>
								<cb:DataContextSpy x:Key="FileData" DataContext="{Binding}" />
							</DataGrid.Resources>
							<DataGrid.Columns>
								<DataGridCheckBoxColumn MinWidth="25" CanUserResize="False" 
									Binding="{Binding Selected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" >
									<DataGridCheckBoxColumn.Header>
										<CheckBox IsChecked="{Binding Source={StaticResource FileData}, Path=DataContext.AllSelected, Mode=TwoWay}"
										  ToolTip="Select/Deselect All" />
									</DataGridCheckBoxColumn.Header>
									<DataGridCheckBoxColumn.CellStyle>
										<Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource DataGrid_NoHighlight}">
											<Setter Property="Margin" Value="0" />
										</Style>
									</DataGridCheckBoxColumn.CellStyle>
								</DataGridCheckBoxColumn>
								<DataGridTextColumn Header="Key" Binding="{Binding EntryKey}" MinWidth="50" Width="Auto">
									<DataGridTextColumn.CellStyle>
										<Style TargetType="DataGridCell" BasedOn="{StaticResource DataGrid_NoHighlight}">
											<Setter Property="IsEnabled" Value="{Binding KeyIsEditable}" />
										</Style>
									</DataGridTextColumn.CellStyle>
								</DataGridTextColumn>
								<DataGridTemplateColumn Header="Content" Width="*">
									<DataGridTemplateColumn.CellTemplate>
										<DataTemplate>
											<TextBox
												Tag="{Binding}"
												x:Name="EntryContentTextBox"
												Text="{Binding EntryContent, UpdateSourceTrigger=PropertyChanged, Mode=TwoWay}"
												BorderThickness="0" BorderBrush="{x:Null}" FontSize="12"
												GotFocus="EntryContent_GotFocus"
												LostFocus="EntryContent_LostFocus"
												SelectionChanged="EntryContent_SelectionChanged"
											/>
											<!--<Grid>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="*" />
													<ColumnDefinition Width="Auto" />
												</Grid.ColumnDefinitions>
												--><!--<c:ImageButton x:Name="ExpandContentButton" Grid.Column="1"
													Command="{Binding Path=DataContext.ExpandContentCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
													CommandParameter="{Binding}"
													ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_ExpandText}"
													Source="{x:Static vdata:IconPathData.Ellipsis}"
												/>--><!--
											</Grid>-->
										</DataTemplate>
									</DataGridTemplateColumn.CellTemplate>
								</DataGridTemplateColumn>
								<DataGridTextColumn Header="Handle" Binding="{Binding EntryHandle}" Width="150" />
							</DataGrid.Columns>
							<DataGrid.RowStyle>
								<Style TargetType="{x:Type DataGridRow}">
									<EventSetter Event="GotFocus" Handler="EntryDataGrid_RowFocused" />
								</Style>
							</DataGrid.RowStyle>
						</DataGrid>
						<GridSplitter Grid.Row="1" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Height="3" Background="{Binding ElementName=LocaleEntryDataGrid, Path=BorderBrush}" />
						<Border Grid.Row="2" 
							BorderThickness="1,0,1,1" BorderBrush="{Binding ElementName=LocaleEntryDataGrid, Path=BorderBrush}">
							<Grid>
								<Grid.Resources>
									<Style TargetType="{x:Type ContentPresenter}">
										<Style.Triggers>
											<DataTrigger Binding="{Binding Path=IsChecked, ElementName=PreviewToggleButton}" Value="True" >
												<Setter Property="Content" Value="{StaticResource EntryContentPreview}" />
											</DataTrigger>
											<DataTrigger Binding="{Binding Path=IsChecked, ElementName=PreviewToggleButton}" Value="False" >
												<Setter Property="Content" Value="{StaticResource EntryContentRichTextBox}" />
											</DataTrigger>
										</Style.Triggers>
									</Style>
								</Grid.Resources>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>
								<ContentPresenter Grid.Column="1" Content="" />
								<ToggleButton
									x:Name="PreviewToggleButton"
									IsChecked="{Binding Path=DataContext.ContentPreviewModeEnabled, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
									VerticalAlignment="Stretch"
									Content="Preview"
									Margin="0" Padding="4,0,4,2"
									BorderThickness="0,0,0,1"
								>
									<ToggleButton.LayoutTransform>
										<RotateTransform Angle="-90" />
									</ToggleButton.LayoutTransform>
								</ToggleButton>
							</Grid>
						</Border>
					</Grid>
				</Grid>
			</DataTemplate>

			<Style x:Key="FocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<LinearGradientBrush x:Key="TabItem.Static.Background" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#F0F0F0" Offset="0.0"/>
				<GradientStop Color="#E5E5E5" Offset="1.0"/>
			</LinearGradientBrush>
			<SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>
			<LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
				<GradientStop Color="#ECF4FC" Offset="0.0"/>
				<GradientStop Color="#DCECFC" Offset="1.0"/>
			</LinearGradientBrush>
			<SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
			<SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
			<SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>

			<Style x:Key="TabItemFileDataStyle" TargetType="{x:Type TabItem}">
				<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
				<Setter Property="Foreground" Value="Black"/>
				<Setter Property="Background" Value="{StaticResource TabItem.Static.Background}"/>
				<Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}"/>
				<Setter Property="Margin" Value="0"/>
				<Setter Property="Padding" Value="6,2,6,2"/>
				<Setter Property="HorizontalContentAlignment" Value="Stretch"/>
				<Setter Property="VerticalContentAlignment" Value="Stretch"/>
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TabItem}">
							<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
								<Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" Margin="0">
									<Border x:Name="innerBorder" BorderBrush="{StaticResource TabItem.Selected.Border}" BorderThickness="1,1,1,0" Background="#FFD7F5BE" Margin="-1" Opacity="0"/>
								</Border>
								<ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
							</Grid>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
									<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
									<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
									<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
									<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
									<Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
									<Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Panel.ZIndex" Value="1"/>
									<Setter Property="Margin" Value="-2,-2,0,-2"/>
									<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Panel.ZIndex" Value="1"/>
									<Setter Property="Margin" Value="-2,0,-2,-2"/>
									<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Panel.ZIndex" Value="1"/>
									<Setter Property="Margin" Value="0,-2,-2,-2"/>
									<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
									</MultiDataTrigger.Conditions>
									<Setter Property="Panel.ZIndex" Value="1"/>
									<Setter Property="Margin" Value="-2,-2,-2,0"/>
									<Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
									<Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
									<Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
								</MultiDataTrigger>

								<DataTrigger Binding="{Binding ChangesUnsaved}" Value="True">
									<Setter TargetName="innerBorder" Property="BorderBrush" Value="#FFFF6565"/>
								</DataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<DataTemplate x:Key="LocaleFileTabs">
				<Grid>
					<TabControl
						ItemsSource="{Binding Tabs}"
						TabStripPlacement="Left" 
						ContentTemplate="{Binding Source={StaticResource LocaleEntryGrid}}" 
						SelectedIndex="{Binding SelectedFileIndex}"
						BorderThickness="1" Margin="0" Padding="0"
						Style="{StaticResource TabControlFileData}"
						HorizontalContentAlignment="Left"
					>
						<TabControl.Resources>
							<Style TargetType="TabItem" BasedOn="{StaticResource TabItemFileDataStyle}">
								<Setter Property="HeaderTemplate">
									<Setter.Value>
										<DataTemplate>
											<TextBlock 
												Text="{Binding DisplayName}"
												ToolTip="{Binding SourcePath}"
												TextAlignment="Left"
												Margin="4,0,0,0"
												x:Name="headerText"
											>
												<TextBlock.Resources>
													<Style TargetType="ToolTip">
														<Setter Property="Visibility" Value="{Binding SourcePath, Converter={StaticResource EmptyStringVisibilityConverter}}" />
													</Style>
												</TextBlock.Resources>
											</TextBlock>
											<DataTemplate.Triggers>
												<DataTrigger Binding="{Binding ChangesUnsaved}" Value="True">
													<Setter TargetName="headerText" Property="Foreground" Value="#FF459727"/>
													<Setter TargetName="headerText" Property="FontWeight" Value="Bold"/>
													<Setter TargetName="headerText" Property="FontStyle" Value="Italic"/>
												</DataTrigger>
											</DataTemplate.Triggers>
										</DataTemplate>
									</Setter.Value>
								</Setter>
							</Style>
						</TabControl.Resources>
					</TabControl>
				</Grid>
			</DataTemplate>
			<DataTemplate x:Key="LocaleGroupTab">
				<TabItem Header="{Binding Name}" Visibility="{Binding Visibility, Converter={StaticResource BoolToVisibilityConverter}}"/>
			</DataTemplate>
		</ResourceDictionary>
	</Window.Resources>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<DockPanel Grid.Row="0" Background="Transparent">
			<Menu DockPanel.Dock="Top" ItemsSource="{Binding MenuData.Menus}" Background="Transparent" Margin="0" MinHeight="10" Padding="0"
				  UsesItemContainerTemplate="True" ItemContainerTemplateSelector="{StaticResource MenuItemContainerTemplateSelector}" />
		</DockPanel>
		<Grid Grid.Column="1" Background="Transparent" Margin="4,2,2,2" Height="Auto" Grid.Row="1" >
			<Grid.Resources>
				<Style TargetType="StackPanel">
					<Setter Property="Background" Value="Transparent" />
					<Setter Property="Orientation" Value="Horizontal" />
					<Setter Property="HorizontalAlignment" Value="Left" />
				</Style>
				<Style TargetType="{x:Type c:ImageButton}" BasedOn="{StaticResource DefaultImageButtonStyle}">
					<Setter Property="Margin" Value="2" />
				</Style>
			</Grid.Resources>
			<StackPanel x:Name="ShortcutsButtonPanel" Grid.Column="0" VerticalAlignment="Center" Margin="2" MinHeight="16">
				<c:ImageButton
					x:Name="AddFileButton"
					ToolTip_Enabled="{x:Static core:DOS2DETooltips.Button_Locale_AddFile}"
					ToolTip_Disabled="{x:Static core:DOS2DETooltips.Button_Locale_AddFile_Disabled}"
					Source="{x:Static vdata:IconPathData.AddFile}" 
					IsEnabled="{Binding RelativeSource={RelativeSource AncestorType={x:Type Window}}, Path=DataContext.CanAddFile}"
					cb:ImageButtonHoverOnDisabled.Enable="True"
				/>
				<c:ImageButton
					x:Name="ImportFileButton"
					Command="{Binding ImportFileCommand}"
					CommandParameter="{Binding CurrentFileImportPath, Converter={StaticResource ParamsToOpenFileBrowserParamsConverter}}"
					ToolTip_Enabled="{x:Static core:DOS2DETooltips.Button_Locale_ImportFile}"
					ToolTip_Disabled="{x:Static core:DOS2DETooltips.Button_Locale_ImportFile_Disabled}"
					Source="{x:Static vdata:IconPathData.ImportFile}"
					IsEnabled="{Binding CanAddFile}"
					cb:ImageButtonHoverOnDisabled.Enable="True"
					/>
				<c:ImageButton
					x:Name="SaveButton"
					Command="{Binding SaveCurrentCommand}" 
					Source="{x:Static vdata:IconPathData.Save}"
					ToolTip_Enabled="{x:Static core:DOS2DETooltips.Button_Locale_SaveCurrent}"
					ToolTip_Disabled="{x:Static core:DOS2DETooltips.Button_Locale_SaveCurrent_Disabled}"
					IsEnabled="{Binding CanSave}"
					cb:ImageButtonHoverOnDisabled.Enable="True"
				/>
				<c:ImageButton
					x:Name="SaveAllButton" 
					Command="{Binding SaveAllCommand}" ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_SaveAll}" Source="{x:Static vdata:IconPathData.SaveAll}" />
				<!--<Rectangle Style="{StaticResource VerticalSeparator}" />-->
			</StackPanel>
		</Grid>
		<TabControl Grid.Row="2" ItemsSource="{Binding Groups}" ContentTemplate="{Binding Source={StaticResource LocaleFileTabs}}"
					SelectedIndex="{Binding SelectedGroupIndex}" Style="{StaticResource LocaleGroupTabControl}"
			>
			<TabControl.ItemContainerStyle>
				<Style TargetType="TabItem">
					<Setter Property="Visibility" Value="{Binding Visibility, Converter={StaticResource BoolToVisibilityConverter}}"/>
					<Setter Property="Header" Value="{Binding Name}"/>
				</Style>
			</TabControl.ItemContainerStyle>
		</TabControl>
		<Grid x:Name="FooterGrid" Grid.Row="3">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="90" MaxWidth="90" />
				<ColumnDefinition Width="*" />
			</Grid.ColumnDefinitions>
			<Border Grid.Column="0" BorderThickness="1,1,0,1" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
				<TextBlock x:Name="FooterOuputTextboxDate" Text="{Binding OutputDate}" TextAlignment="Center" Background="{x:Null}" Margin="4,0,4,0" />
			</Border>
			<Border Grid.Column="1" BorderThickness="1" BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}">
				<TextBlock x:Name="FooterOuputTextboxText" Text="{Binding OutputText}" TextTrimming="CharacterEllipsis" ToolTip="{Binding OutputText}" 
						   TextAlignment="Left" Foreground="{Binding OutputType, Converter={StaticResource FooterOutputColorConverter}}" Background="{x:Null}" 
						   Padding="0" Margin="4,0,4,0"
						   />
			</Border>
		</Grid>
		<!--<xctk:WindowContainer>
			<xctk:ChildWindow x:Name="ContentWindow" Caption="Content" Width="800" Height="600" IsModal="False">
				<TextBlock Text="{Binding Source=SelectedEntry, Path=EntryContent, Mode=TwoWay, TargetNullValue='null', FallbackValue='test'}" />
			</xctk:ChildWindow>
		</xctk:WindowContainer>-->
	</Grid>
</reactiveui:ReactiveWindow>
