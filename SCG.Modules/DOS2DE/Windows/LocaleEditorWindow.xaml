<reactiveui:ReactiveWindow
	x:Class="SCG.Modules.DOS2DE.Windows.LocaleEditorWindow"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:c="clr-namespace:SCG.Controls;assembly=SourceControlGenerator"
	xmlns:cb="clr-namespace:SCG.Controls.Behavior;assembly=SourceControlGenerator"
	xmlns:clr="clr-namespace:System;assembly=mscorlib"
	xmlns:conv="clr-namespace:SCG.Converters;assembly=SourceControlGenerator"
	xmlns:core="clr-namespace:SCG.Modules.DOS2DE.Core"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:data="clr-namespace:SCG.Modules.DOS2DE.Data.View.Locale"
	xmlns:html="clr-namespace:TheArtOfDev.HtmlRenderer.WPF;assembly=HtmlRenderer.WPF"
	xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
	xmlns:local="clr-namespace:SCG.Modules.DOS2DE.Windows"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:reactiveui="http://reactiveui.net"
	xmlns:util="clr-namespace:SCG.Modules.DOS2DE.Utilities"
	xmlns:vdata="clr-namespace:SCG.Data.View;assembly=SourceControlGenerator"
	xmlns:win="clr-namespace:SCG.Windows;assembly=SourceControlGenerator"
	xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
	Title="{Binding WindowTitle, FallbackValue='Localization Editor'}"
	Width="960"
	Height="525"
	cb:InputBindingsBehavior.TakesInputBindingPrecedence="True"
	d:DataContext="{d:DesignInstance data:LocaleEditorDesignData,
	                                 IsDesignTimeCreatable=True}"
	x:TypeArguments="data:LocaleViewModel"
	Closing="LocaleWindow_Closing"
	IsEnabled="{Binding IsUnlocked}"
	mc:Ignorable="d">
	<Window.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="pack://application:,,,/SourceControlGenerator;component/ThemeSystem/ResourceDictionary/MainAppDictionary.xaml" />
				<ResourceDictionary Source="pack://application:,,,/SourceControlGenerator;component/ThemeSystem/ResourceDictionary/ScrollbarStyles.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<util:LocalizationTextFormatter x:Key="LocalizationTextFormatter" />
			<clr:String x:Key="HtmlPreviewStyleSheet">
				body {
				color: #a49d97;
				margin-top: 4px;
				margin-bottom: 4px;
				margin-right: 4px;
				margin-left: 4px;
				font-size: 18;
				}
			</clr:String>
			<local:LocaleEditorDebugViewModel x:Key="DebugData" />
			<Style x:Key="ShortcutButton" TargetType="Button">
				<Setter Property="MinHeight" Value="16" />
				<Setter Property="MinWidth" Value="16" />
				<Setter Property="MaxHeight" Value="16" />
				<Setter Property="MaxWidth" Value="16" />
				<Setter Property="BorderBrush" Value="{x:Null}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Background" Value="Transparent" />

				<Setter Property="Content">
					<Setter.Value>
						<Style TargetType="Image">
							<Setter Property="Stretch" Value="UniformToFill" />
							<Style.Triggers>
								<Trigger Property="IsEnabled" Value="False">
									<Setter Property="Source">
										<Setter.Value>
											<Binding Path="Source" RelativeSource="{RelativeSource Self}">
												<Binding.Converter>
													<conv:GrayscaleTintImageConverter />
												</Binding.Converter>
											</Binding>
										</Setter.Value>
									</Setter>
								</Trigger>
							</Style.Triggers>
						</Style>
					</Setter.Value>
				</Setter>

				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Foreground" Value="Transparent" />
						<Setter Property="Background" Value="Transparent" />
						<Setter Property="BorderBrush" Value="{x:Null}" />
						<Setter Property="BorderThickness" Value="0" />
					</Trigger>
				</Style.Triggers>
			</Style>

			<Style x:Key="ButtonImage" TargetType="Image">
				<Setter Property="Stretch" Value="UniformToFill" />
				<Style.Triggers>
					<Trigger Property="IsEnabled" Value="False">
						<Setter Property="Source">
							<Setter.Value>
								<Binding>
									<Binding.Converter>
										<conv:GrayscaleTintImageConverter />
									</Binding.Converter>
								</Binding>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
			<Style x:Key="CellNoHighlightChangesUnsaved" TargetType="{x:Type DataGridCell}">
				<Style.Triggers>
					<Trigger Property="IsSelected" Value="True">
						<Setter Property="Foreground" Value="Black" />
						<Setter Property="BorderBrush" Value="{x:Null}" />
					</Trigger>
					<Trigger Property="IsSelected" Value="False">
						<Setter Property="Background" Value="{x:Null}" />
					</Trigger>
					<DataTrigger Binding="{Binding ChangesUnsaved}" Value="True">
						<Setter Property="Background">
							<Setter.Value>
								<SolidColorBrush Opacity="0.35" Color="Lime" />
							</Setter.Value>
						</Setter>
					</DataTrigger>
					<DataTrigger Binding="{Binding ChangesUnsaved}" Value="False">
						<Setter Property="Background" Value="{x:Null}" />
					</DataTrigger>
				</Style.Triggers>
			</Style>
			<Style
				x:Key="ProjectsHeaderStyle"
				BasedOn="{StaticResource {x:Type DataGridColumnHeader}}"
				TargetType="{x:Type DataGridColumnHeader}">
				<Setter Property="HorizontalContentAlignment" Value="Center" />
			</Style>
			<SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF" />
			<SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC" />
			<Grid x:Key="KeyActionsGrid" Background="#FFD0FFD0">
				<Grid.ColumnDefinitions>
					<ColumnDefinition Width="*" />
					<ColumnDefinition Width="Auto" />
				</Grid.ColumnDefinitions>
				<StackPanel
					Grid.Column="1"
					Margin="2"
					Orientation="Horizontal">
					<StackPanel.Resources>
						<Style TargetType="{x:Type Button}">
							<Setter Property="Focusable" Value="False" />
						</Style>
					</StackPanel.Resources>
					<Button
						Margin="2"
						Padding="0"
						Command="{Binding Path=DataContext.AddFontTagCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						IsEnabled="{Binding Path=DataContext.ContentFocused, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_InsertFontText}">
						<Button.Content>
							<Label
								Margin="0"
								Content="&lt;font&gt;"
								FontSize="8" />
						</Button.Content>
					</Button>
					<xctk:ColorPicker
						x:Name="FontColorPicker"
						Width="50"
						Margin="2"
						Loaded="FontColorPicker_Loaded"
						SelectedColor="{Binding Path=DataContext.SelectedColor, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />
				</StackPanel>
				<StackPanel Margin="2" Orientation="Horizontal">
					<StackPanel.Resources>
						<Style BasedOn="{StaticResource DefaultImageButtonStyle}" TargetType="{x:Type c:ImageButton}">
							<Setter Property="TintColor" Value="Lime" />
							<Setter Property="Margin" Value="2" />
						</Style>
					</StackPanel.Resources>
					<TextBlock
						Margin="4,0,2,0"
						VerticalAlignment="Center"
						Text="Actions:" />
					<c:ImageButton
						cb:ImageButtonHoverOnDisabled.Enable="True"
						Command="{Binding Path=DataContext.AddNewKeyCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						IsEnabled="{Binding Path=DataContext.CanAddKeys, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						Source="{x:Static vdata:IconPathData.AddRow}"
						ToolTip_Disabled="{x:Static core:DOS2DETooltips.Button_Locale_AddKey_Disabled}"
						ToolTip_Enabled="{x:Static core:DOS2DETooltips.Button_Locale_AddKey}" />
					<c:ImageButton
						cb:ImageButtonHoverOnDisabled.Enable="True"
						Command="{Binding Path=DataContext.DeleteKeysCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						Source="{x:Static vdata:IconPathData.DeleteTableRow}"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_DeleteKeys}" />
					<Rectangle Style="{StaticResource VerticalSeparator}" />
					<c:ImageButton
						Command="{Binding Path=DataContext.GenerateHandlesCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						Source="{x:Static vdata:IconPathData.RowUpdating}"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_GenerateHandles}" />
					<c:ImageButton
						Command="{Binding Path=DataContext.OverrideResHandlesCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						Source="{x:Static vdata:IconPathData.Rename}"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_ReplaceResHandles}" />
					<Rectangle Style="{StaticResource VerticalSeparator}" />
					<c:ImageButton
						cb:ImageButtonHoverOnDisabled.Enable="True"
						Command="{Binding Path=DataContext.ImportKeysCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						IsEnabled="{Binding Path=DataContext.CanAddKeys, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						Source="{x:Static vdata:IconPathData.ImportFile}"
						ToolTip_Disabled="{x:Static core:DOS2DETooltips.Button_Locale_ImportKeys_Disabled}"
						ToolTip_Enabled="{x:Static core:DOS2DETooltips.Button_Locale_ImportKeys}" />
					<Rectangle Style="{StaticResource VerticalSeparator}" />
					<c:ImageButton
						cb:ImageButtonHoverOnDisabled.Enable="True"
						Command="{Binding Path=DataContext.RefreshFileCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						CommandParameter="{Binding}"
						Source="{x:Static vdata:IconPathData.Refresh}"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_RefreshFile}" />
					<c:ImageButton
						cb:ImageButtonHoverOnDisabled.Enable="True"
						Command="{Binding Path=DataContext.ReloadFileCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						CommandParameter="{Binding}"
						Source="{x:Static vdata:IconPathData.Import}"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_ReloadFile}" />
					<Rectangle Style="{StaticResource VerticalSeparator}" />
					<c:ImageButton
						x:Name="ExportButton"
						cb:ImageButtonHoverOnDisabled.Enable="True"
						Command="{Binding Path=DataContext.ExportXMLCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						Source="{x:Static vdata:IconPathData.XSLTTemplate}"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_ExportToXML}" />
					<Rectangle Style="{StaticResource VerticalSeparator}" />
					<c:ImageButton
						cb:ImageButtonHoverOnDisabled.Enable="True"
						Command="{Binding Path=DataContext.SetFileLinkDataCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						CommandParameter="{Binding}"
						Source="{x:Static vdata:IconPathData.LinkFile}"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_SetLinkedData}"
						Visibility="{Binding CanCreateFileLink, Converter={StaticResource BoolToVisibilityConverter}}" />
					<c:ImageButton
						cb:ImageButtonHoverOnDisabled.Enable="True"
						Command="{Binding Path=DataContext.RemoveFileLinkDataCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						CommandParameter="{Binding}"
						Source="{x:Static vdata:IconPathData.LinkRemoved}"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_RemoveLinkedData}"
						Visibility="{Binding HasFileLink, Converter={StaticResource BoolToVisibilityConverter}}" />
					<c:ImageButton
						cb:ImageButtonHoverOnDisabled.Enable="True"
						Command="{Binding Path=DataContext.ReloadFileLinkDataCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
						CommandParameter="{Binding}"
						Source="{x:Static vdata:IconPathData.LinkVertical}"
						ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_RefreshLinkedData}"
						Visibility="{Binding HasFileLink, Converter={StaticResource BoolToVisibilityConverter}}" />
				</StackPanel>
			</Grid>
			<html:HtmlPanel
				x:Key="EntryContentPreview"
				x:Name="EntryContentPreviewHtmlPanel"
				Padding="6"
				Background="#BF020202"
				BaseStylesheet="{StaticResource HtmlPreviewStyleSheet}"
				Block.LineHeight="2"
				BorderBrush="{x:Null}"
				BorderThickness="0"
				Text="{Binding Path=DataContext.SelectedEntryHtmlContent, UpdateSourceTrigger=PropertyChanged, Mode=OneWay, RelativeSource={RelativeSource AncestorType={x:Type Window}}}">
				<html:HtmlPanel.Resources>
					<Style TargetType="TextBlock">
						<Setter Property="TextAlignment" Value="Center" />
					</Style>
				</html:HtmlPanel.Resources>
			</html:HtmlPanel>
			<!--<xctk:RichTextBox
				x:Key="EntryContentPreview"
				x:Name="EntryContentPreviewRichTextBox"
				Text="{Binding Path=DataContext.SelectedEntryContent, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
				TextFormatter="{StaticResource LocalizationPreviewTextFormatter}"
				BorderThickness="0" BorderBrush="{x:Null}"
				VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Auto"
				IsReadOnly="True"
				IsReadOnlyCaretVisible="True"
				Margin="1" Block.LineHeight="2"
				Background="Transparent"
				IsUndoEnabled="False"
			/>-->
			<xctk:RichTextBox
				x:Key="EntryContentRichTextBox"
				x:Name="EntryContentRichTextBox"
				Margin="1"
				AcceptsReturn="True"
				AcceptsTab="True"
				Background="Transparent"
				Block.LineHeight="2"
				BorderBrush="{x:Null}"
				BorderThickness="0"
				FontSize="{Binding Path=DataContext.ContentFontSize, RelativeSource={RelativeSource AncestorType={x:Type Window}}, FallbackValue=12, TargetNullValue=12}"
				GotFocus="EntryContent_GotFocus"
				IsReadOnly="{Binding Path=DataContext.CanEditContentPreview, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
				IsUndoEnabled="False"
				SelectionChanged="EntryContent_SelectionChanged"
				Tag="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
				Text="{Binding Path=DataContext.SelectedEntryContent, UpdateSourceTrigger=PropertyChanged, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
				TextFormatter="{StaticResource LocalizationTextFormatter}">
				<i:Interaction.Behaviors>
					<cb:RichTextBoxSelectionBehavior SelectedText="{Binding Path=DataContext.SelectedText, Mode=OneWayToSource, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />
				</i:Interaction.Behaviors>
				<xctk:RichTextBox.ContextMenu>
					<ContextMenu>
						<MenuItem Command="ApplicationCommands.Cut" />
						<MenuItem Command="ApplicationCommands.Copy" />
						<MenuItem Command="ApplicationCommands.Paste" />
						<MenuItem Command="ApplicationCommands.SelectAll" />
						<MenuItem
							Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.SelectNoneCommand}"
							CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget}"
							Header="Select None" />
						<!--<MenuItem Header="Display Content in Separate Window" Command="{Binding Path=PlacementTarget.Tag.PopoutContentCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"/>-->
						<MenuItem Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.ToggleContentLightModeCommand}" Header="Toggle Light/Dark Mode" />
						<MenuItem Header="Font Size">
							<MenuItem
								Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.ChangeContentFontSizeCommand}"
								CommandParameter="12"
								Header="12" />
							<MenuItem
								Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.ChangeContentFontSizeCommand}"
								CommandParameter="16"
								Header="16" />
							<MenuItem
								Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.ChangeContentFontSizeCommand}"
								CommandParameter="24"
								Header="24" />
							<MenuItem
								Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.ChangeContentFontSizeCommand}"
								CommandParameter="32"
								Header="32" />
						</MenuItem>
					</ContextMenu>
				</xctk:RichTextBox.ContextMenu>
			</xctk:RichTextBox>
			<Style x:Key="LocaleGroupTabControl" TargetType="{x:Type TabControl}">
				<Setter Property="Padding" Value="0" />
				<Setter Property="HorizontalContentAlignment" Value="Center" />
				<Setter Property="VerticalContentAlignment" Value="Center" />
				<Setter Property="Background" Value="{StaticResource TabItem.Selected.Background}" />
				<Setter Property="BorderBrush" Value="{StaticResource TabItem.Selected.Border}" />
				<Setter Property="BorderThickness" Value="0" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TabControl}">
							<Grid
								x:Name="templateRoot"
								ClipToBounds="true"
								KeyboardNavigation.TabNavigation="Local"
								SnapsToDevicePixels="true">
								<Grid.ColumnDefinitions>
									<ColumnDefinition x:Name="ColumnDefinition0" />
									<ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition x:Name="RowDefinition0" Height="Auto" />
									<RowDefinition x:Name="RowDefinition1" Height="*" />
								</Grid.RowDefinitions>
								<TabPanel
									x:Name="headerPanel"
									Grid.Row="0"
									Grid.Column="0"
									Panel.ZIndex="1"
									Background="Transparent"
									IsItemsHost="true"
									KeyboardNavigation.TabIndex="1" />
								<Border
									x:Name="groupContentPanel"
									Grid.Row="1"
									Grid.Column="0"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									KeyboardNavigation.DirectionalNavigation="Contained"
									KeyboardNavigation.TabIndex="2"
									KeyboardNavigation.TabNavigation="Local">
									<ContentPresenter
										x:Name="PART_SelectedContentHost"
										Margin="{TemplateBinding Padding}"
										ContentSource="SelectedContent"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="TabStripPlacement" Value="Bottom">
									<Setter TargetName="headerPanel" Property="Grid.Row" Value="1" />
									<Setter TargetName="groupContentPanel" Property="Grid.Row" Value="0" />
									<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
									<Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
									<Setter TargetName="headerPanel" Property="Margin" Value="2,0,2,2" />
								</Trigger>
								<Trigger Property="TabStripPlacement" Value="Left">
									<Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
									<Setter TargetName="groupContentPanel" Property="Grid.Row" Value="0" />
									<Setter TargetName="headerPanel" Property="Grid.Column" Value="0" />
									<Setter TargetName="groupContentPanel" Property="Grid.Column" Value="1" />
									<Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
									<Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
									<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
									<Setter TargetName="RowDefinition1" Property="Height" Value="0" />
									<Setter TargetName="headerPanel" Property="Margin" Value="2,2,0,2" />
								</Trigger>
								<Trigger Property="TabStripPlacement" Value="Right">
									<Setter TargetName="headerPanel" Property="Grid.Row" Value="0" />
									<Setter TargetName="groupContentPanel" Property="Grid.Row" Value="0" />
									<Setter TargetName="headerPanel" Property="Grid.Column" Value="1" />
									<Setter TargetName="groupContentPanel" Property="Grid.Column" Value="0" />
									<Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
									<Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
									<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
									<Setter TargetName="RowDefinition1" Property="Height" Value="0" />
									<Setter TargetName="headerPanel" Property="Margin" Value="0,2,2,2" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="TabControlFileData"
				BasedOn="{StaticResource LocaleGroupTabControl}"
				TargetType="{x:Type TabControl}">
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TabControl}">
							<Grid
								x:Name="templateRoot"
								ClipToBounds="true"
								KeyboardNavigation.TabNavigation="Local"
								ScrollViewer.VerticalScrollBarVisibility="Auto"
								SnapsToDevicePixels="true">
								<Grid.ColumnDefinitions>
									<ColumnDefinition x:Name="ColumnDefinition0" />
									<ColumnDefinition x:Name="GridSplitter" Width="0" />
									<ColumnDefinition x:Name="ColumnDefinition1" Width="0" />
								</Grid.ColumnDefinitions>
								<Grid.RowDefinitions>
									<RowDefinition x:Name="RowDefinition0" Height="Auto" />
									<RowDefinition x:Name="RowDefinition1" Height="*" />
								</Grid.RowDefinitions>
								<GridSplitter
									Grid.RowSpan="3"
									Grid.Column="1"
									Height="Auto"
									HorizontalAlignment="Stretch"
									VerticalAlignment="Stretch"
									Background="LightGray"
									ResizeDirection="Columns" />
								<Grid
									x:Name="headerGrid"
									Grid.Row="0"
									Grid.Column="0">
									<Grid.RowDefinitions>
										<RowDefinition Height="Auto" />
										<RowDefinition Height="*" />
									</Grid.RowDefinitions>
									<Button
										x:Name="AddFileToGroupButton"
										Grid.Row="0"
										Background="Beige"
										BorderBrush="Bisque"
										BorderThickness="1,1,0,1"
										Command="{Binding Path=DataContext.AddFileToGroupCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
										CommandParameter="{Binding}"
										Content="Add Tab"
										Visibility="{Binding CanAddFiles, Converter={StaticResource BoolToVisibilityConverter}, FallbackValue=Visible}" />
									<ScrollViewer
										Grid.Row="1"
										VerticalAlignment="Top"
										ScrollViewer.CanContentScroll="True"
										ScrollViewer.HorizontalScrollBarVisibility="Disabled"
										ScrollViewer.VerticalScrollBarVisibility="Auto">
										<ScrollViewer.Resources>
											<Style BasedOn="{StaticResource SkinnyScrollbarStyle}" TargetType="{x:Type ScrollBar}">
												<Setter Property="SnapsToDevicePixels" Value="True" />
												<Setter Property="OverridesDefaultStyle" Value="true" />
											</Style>
										</ScrollViewer.Resources>
										<UniformGrid
											x:Name="headerPanel"
											Panel.ZIndex="1"
											Background="Transparent"
											Columns="1"
											IsItemsHost="true"
											KeyboardNavigation.TabIndex="1" />
									</ScrollViewer>
								</Grid>
								<Border
									x:Name="contentPanel"
									Grid.Row="1"
									Grid.Column="0"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="{TemplateBinding BorderThickness}"
									KeyboardNavigation.DirectionalNavigation="Contained"
									KeyboardNavigation.TabIndex="2"
									KeyboardNavigation.TabNavigation="Local">
									<ContentPresenter
										x:Name="PART_SelectedContentHost"
										Margin="{TemplateBinding Padding}"
										ContentSource="SelectedContent"
										SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</Border>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="TabStripPlacement" Value="Bottom">
									<Setter TargetName="headerGrid" Property="Grid.Row" Value="1" />
									<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
									<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
									<Setter TargetName="RowDefinition1" Property="Height" Value="Auto" />
									<Setter TargetName="headerPanel" Property="Margin" Value="2,0,2,2" />
								</Trigger>
								<Trigger Property="TabStripPlacement" Value="Left">
									<Setter TargetName="headerGrid" Property="Grid.Row" Value="0" />
									<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
									<Setter TargetName="headerPanel" Property="Grid.Column" Value="0" />
									<Setter TargetName="contentPanel" Property="Grid.Column" Value="2" />
									<Setter TargetName="ColumnDefinition0" Property="Width" Value="Auto" />
									<Setter TargetName="ColumnDefinition1" Property="Width" Value="*" />
									<Setter TargetName="GridSplitter" Property="Width" Value="1" />
									<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
									<Setter TargetName="RowDefinition1" Property="Height" Value="0" />
									<Setter TargetName="headerPanel" Property="Margin" Value="2,2,0,2" />
								</Trigger>
								<Trigger Property="TabStripPlacement" Value="Right">
									<Setter TargetName="headerGrid" Property="Grid.Row" Value="0" />
									<Setter TargetName="contentPanel" Property="Grid.Row" Value="0" />
									<Setter TargetName="headerGrid" Property="Grid.Column" Value="1" />
									<Setter TargetName="contentPanel" Property="Grid.Column" Value="0" />
									<Setter TargetName="ColumnDefinition0" Property="Width" Value="*" />
									<Setter TargetName="ColumnDefinition1" Property="Width" Value="Auto" />
									<Setter TargetName="RowDefinition0" Property="Height" Value="*" />
									<Setter TargetName="RowDefinition1" Property="Height" Value="0" />
									<Setter TargetName="headerPanel" Property="Margin" Value="0,2,2,2" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter TargetName="templateRoot" Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="LocaleDataGridStyle" TargetType="{x:Type c:SortableDataGrid}">
				<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
				<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
				<Setter Property="BorderBrush" Value="#FF688CAF" />
				<Setter Property="BorderThickness" Value="1" />
				<Setter Property="RowDetailsVisibilityMode" Value="Collapsed" />
				<Setter Property="ScrollViewer.CanContentScroll" Value="true" />
				<Setter Property="ScrollViewer.PanningMode" Value="Both" />
				<Setter Property="Stylus.IsFlicksEnabled" Value="False" />
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type DataGrid}">
							<Border
								Padding="{TemplateBinding Padding}"
								Background="{TemplateBinding Background}"
								BorderBrush="{TemplateBinding BorderBrush}"
								BorderThickness="{TemplateBinding BorderThickness}"
								SnapsToDevicePixels="True">
								<ScrollViewer x:Name="DG_ScrollViewer" Focusable="false">
									<ScrollViewer.Template>
										<ControlTemplate TargetType="{x:Type ScrollViewer}">
											<Grid>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="Auto" />
													<ColumnDefinition Width="*" />
													<ColumnDefinition Width="Auto" />
												</Grid.ColumnDefinitions>
												<Grid.RowDefinitions>
													<RowDefinition Height="Auto" />
													<RowDefinition Height="Auto" />
													<RowDefinition Height="*" />
													<RowDefinition Height="Auto" />
												</Grid.RowDefinitions>
												<Button
													Grid.Row="1"
													Width="{Binding CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
													Command="{x:Static DataGrid.SelectAllCommand}"
													Focusable="false"
													Style="{DynamicResource {ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,
													                                              TypeInTargetAssembly={x:Type DataGrid}}}"
													Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.All}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
												<DataGridColumnHeadersPresenter
													x:Name="PART_ColumnHeadersPresenter"
													Grid.Row="1"
													Grid.Column="1"
													Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Column}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
												<ScrollContentPresenter
													x:Name="PART_ScrollContentPresenter"
													Grid.Row="2"
													Grid.ColumnSpan="2"
													CanContentScroll="{TemplateBinding CanContentScroll}" />
												<ScrollBar
													x:Name="PART_VerticalScrollBar"
													Grid.Row="2"
													Grid.Column="2"
													Maximum="{TemplateBinding ScrollableHeight}"
													Orientation="Vertical"
													ViewportSize="{TemplateBinding ViewportHeight}"
													Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
													Value="{Binding VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
												<Grid Grid.Row="3" Grid.Column="1">
													<Grid.ColumnDefinitions>
														<ColumnDefinition Width="{Binding NonFrozenColumnsViewportHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
														<ColumnDefinition Width="*" />
													</Grid.ColumnDefinitions>
													<ScrollBar
														x:Name="PART_HorizontalScrollBar"
														Grid.Column="1"
														Maximum="{TemplateBinding ScrollableWidth}"
														Orientation="Horizontal"
														ViewportSize="{TemplateBinding ViewportWidth}"
														Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
														Value="{Binding HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
												</Grid>
											</Grid>
										</ControlTemplate>
									</ScrollViewer.Template>
									<ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
								</ScrollViewer>
							</Border>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<MultiTrigger>
						<MultiTrigger.Conditions>
							<Condition Property="IsGrouping" Value="true" />
							<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false" />
						</MultiTrigger.Conditions>
						<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
					</MultiTrigger>
				</Style.Triggers>
			</Style>

			<DataTemplate x:Key="LocaleEntryGrid">
				<Grid>
					<Grid.RowDefinitions>
						<RowDefinition Height="Auto" />
						<RowDefinition Height="*" />
					</Grid.RowDefinitions>
					<ContentPresenter
						Grid.Row="0"
						Grid.Column="0"
						Grid.ColumnSpan="2"
						Content="{StaticResource KeyActionsGrid}" />
					<Grid Grid.Row="1">
						<Grid.Resources>
							<Style TargetType="{x:Type Border}">
								<Style.Triggers>
									<DataTrigger Binding="{Binding Path=DataContext.ContentLightMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="False">
										<Setter Property="Background" Value="DarkGray" />
									</DataTrigger>
									<DataTrigger Binding="{Binding Path=DataContext.ContentLightMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="True">
										<Setter Property="Background" Value="WhiteSmoke" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
							<Style TargetType="{x:Type xctk:RichTextBox}">
								<Style.Triggers>
									<DataTrigger Binding="{Binding Path=DataContext.ContentLightMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="True">
										<Setter Property="Foreground" Value="Black" />
									</DataTrigger>
									<DataTrigger Binding="{Binding Path=DataContext.ContentLightMode, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="False">
										<Setter Property="Foreground" Value="White" />
									</DataTrigger>
								</Style.Triggers>
							</Style>
						</Grid.Resources>
						<Grid.RowDefinitions>
							<RowDefinition Height="4*" />
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
						</Grid.RowDefinitions>
						<!--<Grid.ColumnDefinitions>
							<ColumnDefinition Width="4*"/>
							<ColumnDefinition Width="Auto"/>
							<ColumnDefinition Width="*"/>
						</Grid.ColumnDefinitions>-->
						<c:SortableDataGrid
							x:Name="LocaleEntryDataGrid"
							cb:DataGridDefaultSortDirection.Direction="Descending"
							AutoGenerateColumns="False"
							BorderThickness="0,1,0,0"
							CanUserAddRows="False"
							CanUserDeleteRows="False"
							CanUserResizeRows="True"
							CellStyle="{StaticResource CellNoHighlightChangesUnsaved}"
							EnableRowVirtualization="True"
							ItemsSource="{Binding Entries}"
							Loaded="LocaleEntryDataGrid_Loaded"
							Style="{StaticResource LocaleDataGridStyle}"
							VirtualizingPanel.IsVirtualizingWhenGrouping="True">
							<DataGrid.Resources>
								<cb:DataContextSpy x:Key="FileData" DataContext="{Binding}" />
								<Style TargetType="TextBox">
									<Setter Property="IsReadOnly" Value="False" />
									<Setter Property="Background" Value="Transparent" />
									<Setter Property="BorderThickness" Value="0" />
									<Setter Property="BorderBrush" Value="{x:Null}" />
									<Setter Property="FontSize" Value="12" />
									<Setter Property="IsUndoEnabled" Value="False" />
									<Setter Property="Tag" Value="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />
									<Setter Property="ContextMenu">
										<Setter.Value>
											<ContextMenu>
												<MenuItem Command="ApplicationCommands.Cut" />
												<MenuItem Command="ApplicationCommands.Copy" />
												<MenuItem Command="ApplicationCommands.Paste" />
												<MenuItem Command="ApplicationCommands.SelectAll" />
												<MenuItem
													Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.SelectNoneCommand}"
													CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget}"
													Header="Select None" />
											</ContextMenu>
										</Setter.Value>
									</Setter>
									<!--<EventSetter Event="Loaded" Handler="TextBox_Loaded" />
									<EventSetter Event="Unloaded" Handler="TextBox_Unloaded" />-->
								</Style>
								<Style BasedOn="{StaticResource {x:Type TextBox}}" TargetType="{x:Type c:UnfocusableTextBox}">
									<Setter Property="UpdateBindingOnFocusLost" Value="True" />
									<Setter Property="CanUndoTextOnEscape" Value="True" />
									<EventSetter Event="GotKeyboardFocus" Handler="OnLocaleTextboxGotKeyboardFocus" />
									<EventSetter Event="LostKeyboardFocus" Handler="OnLocaleTextboxLostKeyboardFocus" />
								</Style>
							</DataGrid.Resources>
							<DataGrid.RowStyle>
								<Style BasedOn="{StaticResource {x:Type DataGridRow}}" TargetType="{x:Type DataGridRow}">
									<Setter Property="IsSelected" Value="{Binding Selected}" />
								</Style>
							</DataGrid.RowStyle>
							<DataGrid.Columns>
								<DataGridTemplateColumn
									MinWidth="25"
									CanUserResize="False"
									CanUserSort="True"
									HeaderStyle="{StaticResource ProjectsHeaderStyle}"
									SortMemberPath="Selected">
									<DataGridTemplateColumn.Header>
										<CheckBox IsChecked="{Binding Source={StaticResource FileData}, Path=DataContext.AllSelected, Mode=TwoWay}" ToolTip="Select/Deselect All" />
									</DataGridTemplateColumn.Header>
									<DataGridTemplateColumn.CellStyle>
										<Style BasedOn="{StaticResource CellNoHighlightChangesUnsaved}" TargetType="{x:Type DataGridCell}">
											<Setter Property="Margin" Value="0" />
										</Style>
									</DataGridTemplateColumn.CellStyle>
									<DataGridTemplateColumn.CellTemplate>
										<DataTemplate>
											<CheckBox
												HorizontalAlignment="Center"
												VerticalAlignment="Center"
												IsChecked="{Binding Selected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
												IsEnabled="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=IsSelected, Mode=OneWay}" />
										</DataTemplate>
									</DataGridTemplateColumn.CellTemplate>
								</DataGridTemplateColumn>
								<DataGridTemplateColumn
									Width="Auto"
									CanUserSort="True"
									Header="#"
									SortMemberPath="Index">
									<DataGridTemplateColumn.CellStyle>
										<Style BasedOn="{StaticResource CellNoHighlightChangesUnsaved}" TargetType="DataGridCell">
											<Setter Property="IsEnabled" Value="False" />
											<Setter Property="Margin" Value="0" />
										</Style>
									</DataGridTemplateColumn.CellStyle>
									<DataGridTemplateColumn.CellTemplate>
										<DataTemplate>
											<TextBlock Text="{Binding Index}" />
										</DataTemplate>
									</DataGridTemplateColumn.CellTemplate>
								</DataGridTemplateColumn>
								<DataGridTemplateColumn
									Width="Auto"
									MinWidth="50"
									CanUserSort="True"
									Header="Key"
									SortMemberPath="EntryKey">
									<DataGridTemplateColumn.CellStyle>
										<Style BasedOn="{StaticResource CellNoHighlightChangesUnsaved}" TargetType="DataGridCell">
											<Setter Property="IsEnabled" Value="{Binding KeyIsEditable}" />
										</Style>
									</DataGridTemplateColumn.CellStyle>
									<DataGridTemplateColumn.CellTemplate>
										<DataTemplate>
											<c:UnfocusableTextBox
												x:Name="EntryKeyTextBox"
												Tag="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
												Text="{Binding EntryKey, UpdateSourceTrigger=Explicit}" />
										</DataTemplate>
									</DataGridTemplateColumn.CellTemplate>
								</DataGridTemplateColumn>
								<DataGridTemplateColumn
									Width="*"
									MinWidth="50"
									CanUserSort="True"
									Header="Content"
									SortMemberPath="EntryContent">
									<DataGridTemplateColumn.CellTemplate>
										<DataTemplate>
											<c:UnfocusableTextBox
												x:Name="EntryContentTextBox"
												GotFocus="EntryContent_GotFocus"
												LostFocus="EntryContent_LostFocus"
												SelectionChanged="EntryContent_SelectionChanged"
												Tag="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
												Text="{Binding EntryContent, UpdateSourceTrigger=Explicit}" />
											<!--<Grid>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="*" />
													<ColumnDefinition Width="Auto" />
												</Grid.ColumnDefinitions>
												-->
											<!--<c:ImageButton x:Name="ExpandContentButton" Grid.Column="1"
													Command="{Binding Path=DataContext.ExpandContentCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
													CommandParameter="{Binding}"
													ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_ExpandText}"
													Source="{x:Static vdata:IconPathData.Ellipsis}"
												/>-->
											<!--
											</Grid>-->
										</DataTemplate>
									</DataGridTemplateColumn.CellTemplate>
								</DataGridTemplateColumn>
								<DataGridTemplateColumn
									Width="Auto"
									MinWidth="200"
									CanUserSort="True"
									Header="Handle"
									SortMemberPath="EntryHandle">
									<DataGridTemplateColumn.CellTemplate>
										<DataTemplate>
											<Grid>
												<c:UnfocusableTextBox
													x:Name="EntryHandleTextBox"
													Margin="0,0,12,0"
													AcceptsReturn="False"
													AcceptsTab="False"
													Tag="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
													Text="{Binding EntryHandle, UpdateSourceTrigger=PropertyChanged}">
													<c:UnfocusableTextBox.ContextMenu>
														<ContextMenu>
															<MenuItem Command="ApplicationCommands.Cut" />
															<MenuItem Command="ApplicationCommands.Copy" />
															<MenuItem Command="ApplicationCommands.Paste" />
															<MenuItem Command="ApplicationCommands.SelectAll" />
															<MenuItem
																Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.NewHandleCommand}"
																CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget}"
																Header="Generate New Handle" />
															<MenuItem
																Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.Tag.ResetHandleCommand}"
																CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget}"
																Header="Unset Handle" />
														</ContextMenu>
													</c:UnfocusableTextBox.ContextMenu>
												</c:UnfocusableTextBox>
												<TextBlock
													Grid.Column="4"
													Margin="4,0,0,0"
													HorizontalAlignment="Left"
													VerticalAlignment="Center"
													Foreground="Gray"
													IsHitTestVisible="False"
													Text="{Binding EntryHandle, UpdateSourceTrigger=PropertyChanged}">
													<TextBlock.Style>
														<Style TargetType="{x:Type TextBlock}">
															<Setter Property="Visibility" Value="Collapsed" />
															<Style.Triggers>
																<DataTrigger Binding="{Binding Text, ElementName=EntryHandleTextBox}" Value="ls::TranslatedStringRepository::s_HandleUnknown">
																	<Setter Property="Visibility" Value="Visible" />
																</DataTrigger>
															</Style.Triggers>
														</Style>
													</TextBlock.Style>
												</TextBlock>
											</Grid>
										</DataTemplate>
									</DataGridTemplateColumn.CellTemplate>
								</DataGridTemplateColumn>
								<!--<DataGridTemplateColumn Width="20" />-->
							</DataGrid.Columns>
						</c:SortableDataGrid>
						<GridSplitter
							Grid.Row="1"
							Height="3"
							HorizontalAlignment="Stretch"
							VerticalAlignment="Stretch"
							Background="{Binding ElementName=LocaleEntryDataGrid, Path=BorderBrush}" />
						<Border
							Grid.Row="2"
							BorderBrush="{Binding ElementName=LocaleEntryDataGrid, Path=BorderBrush}"
							BorderThickness="1,0,1,1">
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="Auto" />
									<ColumnDefinition Width="*" />
								</Grid.ColumnDefinitions>

								<ContentControl Grid.Column="1">
									<ContentControl.Style>
										<Style TargetType="{x:Type ContentControl}">
											<Style.Triggers>
												<DataTrigger Binding="{Binding Path=DataContext.ContentPreviewModeEnabled, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="True">
													<Setter Property="Content" Value="{StaticResource EntryContentPreview}" />
												</DataTrigger>
												<DataTrigger Binding="{Binding Path=DataContext.ContentPreviewModeEnabled, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" Value="False">
													<Setter Property="Content" Value="{StaticResource EntryContentRichTextBox}" />
												</DataTrigger>
											</Style.Triggers>
										</Style>
									</ContentControl.Style>
								</ContentControl>
								<ToggleButton
									x:Name="PreviewToggleButton"
									Margin="0"
									Padding="4,0,4,2"
									VerticalAlignment="Stretch"
									BorderThickness="0,0,0,1"
									Content="Preview"
									IsChecked="{Binding Path=DataContext.ContentPreviewModeEnabled, RelativeSource={RelativeSource AncestorType={x:Type Window}}}">
									<ToggleButton.LayoutTransform>
										<RotateTransform Angle="-90" />
									</ToggleButton.LayoutTransform>
								</ToggleButton>
							</Grid>
						</Border>
					</Grid>
				</Grid>
			</DataTemplate>

			<Style x:Key="FocusVisual">
				<Setter Property="Control.Template">
					<Setter.Value>
						<ControlTemplate>
							<Rectangle
								Margin="2"
								SnapsToDevicePixels="true"
								Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
								StrokeDashArray="1 2"
								StrokeThickness="1" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>

			<LinearGradientBrush x:Key="TabItem.Static.Background" StartPoint="0,0" EndPoint="0,1">
				<GradientStop Offset="0.0" Color="#F0F0F0" />
				<GradientStop Offset="1.0" Color="#E5E5E5" />
			</LinearGradientBrush>
			<SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC" />
			<LinearGradientBrush x:Key="TabItem.MouseOver.Background" StartPoint="0,0" EndPoint="0,1">
				<GradientStop Offset="0.0" Color="#ECF4FC" />
				<GradientStop Offset="1.0" Color="#DCECFC" />
			</LinearGradientBrush>
			<SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA" />
			<SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0" />
			<SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9" />

			<Style x:Key="TabItemFileDataStyle" TargetType="{x:Type TabItem}">
				<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
				<Setter Property="Foreground" Value="Black" />
				<Setter Property="Background" Value="{StaticResource TabItem.Static.Background}" />
				<Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}" />
				<Setter Property="Margin" Value="0" />
				<Setter Property="Padding" Value="6,2,6,2" />
				<Setter Property="HorizontalContentAlignment" Value="Stretch" />
				<Setter Property="VerticalContentAlignment" Value="Stretch" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type TabItem}">
							<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
								<Border
									x:Name="mainBorder"
									Margin="0"
									Background="{TemplateBinding Background}"
									BorderBrush="{TemplateBinding BorderBrush}"
									BorderThickness="1,1,1,0">
									<Border
										x:Name="innerBorder"
										Margin="-1"
										Background="#FFD7F5BE"
										BorderBrush="{StaticResource TabItem.Selected.Border}"
										BorderThickness="1,1,1,0"
										Opacity="0" />
								</Border>
								<ContentPresenter
									x:Name="contentPresenter"
									Margin="{TemplateBinding Padding}"
									HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
									VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
									ContentSource="Header"
									Focusable="False"
									RecognizesAccessKey="True"
									SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
							</Grid>
							<ControlTemplate.Triggers>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="mainBorder" Property="Background" Value="{StaticResource TabItem.MouseOver.Background}" />
									<Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource TabItem.MouseOver.Border}" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="mainBorder" Property="Background" Value="{StaticResource TabItem.MouseOver.Background}" />
									<Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource TabItem.MouseOver.Border}" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="mainBorder" Property="Background" Value="{StaticResource TabItem.MouseOver.Background}" />
									<Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource TabItem.MouseOver.Border}" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="mainBorder" Property="Background" Value="{StaticResource TabItem.MouseOver.Background}" />
									<Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource TabItem.MouseOver.Border}" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
									<Setter TargetName="mainBorder" Property="Background" Value="{StaticResource TabItem.Disabled.Background}" />
									<Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource TabItem.Disabled.Border}" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
									<Setter TargetName="mainBorder" Property="Background" Value="{StaticResource TabItem.Disabled.Background}" />
									<Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource TabItem.Disabled.Border}" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
									<Setter TargetName="mainBorder" Property="Background" Value="{StaticResource TabItem.Disabled.Background}" />
									<Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource TabItem.Disabled.Border}" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="contentPresenter" Property="Opacity" Value="0.56" />
									<Setter TargetName="mainBorder" Property="Background" Value="{StaticResource TabItem.Disabled.Background}" />
									<Setter TargetName="mainBorder" Property="BorderBrush" Value="{StaticResource TabItem.Disabled.Border}" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left" />
									</MultiDataTrigger.Conditions>
									<Setter Property="Panel.ZIndex" Value="1" />
									<Setter Property="Margin" Value="-2,-2,0,-2" />
									<Setter TargetName="innerBorder" Property="Opacity" Value="1" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,0,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,0,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom" />
									</MultiDataTrigger.Conditions>
									<Setter Property="Panel.ZIndex" Value="1" />
									<Setter Property="Margin" Value="-2,0,-2,-2" />
									<Setter TargetName="innerBorder" Property="Opacity" Value="1" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,0,1,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,0,1,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right" />
									</MultiDataTrigger.Conditions>
									<Setter Property="Panel.ZIndex" Value="1" />
									<Setter Property="Margin" Value="0,-2,-2,-2" />
									<Setter TargetName="innerBorder" Property="Opacity" Value="1" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="0,1,1,1" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="0,1,1,1" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
									</MultiDataTrigger.Conditions>
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
								</MultiDataTrigger>
								<MultiDataTrigger>
									<MultiDataTrigger.Conditions>
										<Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true" />
										<Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top" />
									</MultiDataTrigger.Conditions>
									<Setter Property="Panel.ZIndex" Value="1" />
									<Setter Property="Margin" Value="-2,-2,-2,0" />
									<Setter TargetName="innerBorder" Property="Opacity" Value="1" />
									<Setter TargetName="innerBorder" Property="BorderThickness" Value="1,1,1,0" />
									<Setter TargetName="mainBorder" Property="BorderThickness" Value="1,1,1,0" />
								</MultiDataTrigger>
								<DataTrigger Binding="{Binding ChangesUnsaved}" Value="True">
									<Setter TargetName="innerBorder" Property="BorderBrush" Value="#FFFF6565" />
								</DataTrigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style x:Key="LocaleFileTabGrid" TargetType="Grid">
				<Setter Property="Background" Value="Transparent" />
				<Style.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding CanRename}" Value="False" />
							<Condition Binding="{Binding IsRenaming}" Value="False" />
						</MultiDataTrigger.Conditions>
						<MultiDataTrigger.Setters>
							<Setter Property="ContextMenu">
								<Setter.Value>
									<ContextMenu>
										<MenuItem
											Command="{Binding Path=PlacementTarget.Tag.CopyToClipboardCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
											CommandParameter="{Binding Name}"
											Header="Copy Name" />
										<MenuItem
											Command="{Binding Path=PlacementTarget.Tag.CopyToClipboardCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
											CommandParameter="{Binding SourcePath}"
											Header="Copy Full Path" />
									</ContextMenu>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger.Setters>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding CanRename}" Value="True" />
							<Condition Binding="{Binding IsRenaming}" Value="False" />
						</MultiDataTrigger.Conditions>
						<MultiDataTrigger.Setters>
							<Setter Property="ContextMenu">
								<Setter.Value>
									<ContextMenu>
										<MenuItem
											Command="{Binding Path=PlacementTarget.Tag.CopyToClipboardCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
											CommandParameter="{Binding Name}"
											Header="Copy Name" />
										<MenuItem
											Command="{Binding Path=PlacementTarget.Tag.CopyToClipboardCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
											CommandParameter="{Binding SourcePath}"
											Header="Copy Full Path" />
										<MenuItem
											Command="{Binding Path=PlacementTarget.Tag.ToggleRenameFileTabCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
											CommandParameter="{Binding}"
											Header="Rename"
											Visibility="{Binding CanRename, Converter={StaticResource BoolToVisibilityConverter}, FallbackValue=Collapsed}" />
									</ContextMenu>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger.Setters>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding CanRename}" Value="True" />
							<Condition Binding="{Binding IsRenaming}" Value="True" />
						</MultiDataTrigger.Conditions>
						<MultiDataTrigger.Setters>
							<Setter Property="ContextMenu">
								<Setter.Value>
									<ContextMenu>
										<MenuItem
											Command="{Binding Path=PlacementTarget.Tag.ConfirmRenameFileTabCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
											CommandParameter="{Binding}"
											Header="Confirm Rename" />
										<MenuItem
											Command="{Binding Path=PlacementTarget.Tag.CancelRenamingFileTabCommand, RelativeSource={RelativeSource AncestorType=ContextMenu}}"
											CommandParameter="{Binding}"
											Header="Cancel Renaming" />
									</ContextMenu>
								</Setter.Value>
							</Setter>
						</MultiDataTrigger.Setters>
					</MultiDataTrigger>
				</Style.Triggers>
			</Style>

			<DataTemplate x:Key="LocaleFileTabs">
				<Grid>
					<TabControl
						x:Name="LocaleFileTabControl"
						Margin="0"
						Padding="0"
						HorizontalContentAlignment="Stretch"
						cb:TabContent.IsCached="True"
						cb:TabContent.Template="{Binding Source={StaticResource LocaleEntryGrid}}"
						BorderThickness="1"
						ItemsSource="{Binding Tabs}"
						SelectedIndex="{Binding SelectedFileIndex}"
						SelectionChanged="LocaleFileTabControl_SelectionChanged"
						Style="{StaticResource TabControlFileData}"
						TabStripPlacement="Left">
						<TabControl.Resources>
							<Style BasedOn="{StaticResource TabItemFileDataStyle}" TargetType="TabItem">
								<EventSetter Event="LostFocus" Handler="FileDataTab_LostFocus" />
								<Setter Property="HeaderTemplate">
									<Setter.Value>
										<DataTemplate>
											<Grid Style="{StaticResource LocaleFileTabGrid}" Tag="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}">
												<Grid.Resources>
													<Style x:Key="TabTextBlockStyle" TargetType="TextBlock">
														<Setter Property="Text" Value="{Binding DisplayName}" />
														<Setter Property="ToolTip" Value="{Binding SourcePath}" />
														<Setter Property="TextAlignment" Value="Left" />
														<Setter Property="Margin" Value="4,0,0,0" />
														<Setter Property="HorizontalAlignment" Value="Left" />
														<Setter Property="Tag" Value="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" />
													</Style>
													<DataTemplate x:Key="DefaultTabText">
														<TextBlock x:Name="headerText" Style="{StaticResource TabTextBlockStyle}">
															<TextBlock.Resources>
																<Style TargetType="ToolTip">
																	<Setter Property="Visibility" Value="{Binding SourcePath, Converter={StaticResource EmptyStringVisibilityConverter}}" />
																</Style>
															</TextBlock.Resources>
														</TextBlock>
														<DataTemplate.Triggers>
															<DataTrigger Binding="{Binding ChangesUnsaved}" Value="True">
																<Setter TargetName="headerText" Property="Foreground" Value="#FF459727" />
																<Setter TargetName="headerText" Property="FontWeight" Value="Bold" />
																<Setter TargetName="headerText" Property="FontStyle" Value="Italic" />
															</DataTrigger>
														</DataTemplate.Triggers>
													</DataTemplate>
													<DataTemplate x:Key="CustomTabText">
														<TextBlock x:Name="headerText" Style="{StaticResource TabTextBlockStyle}">
															<TextBlock.Resources>
																<Style TargetType="ToolTip">
																	<Setter Property="Visibility" Value="{Binding SourcePath, Converter={StaticResource EmptyStringVisibilityConverter}}" />
																</Style>
															</TextBlock.Resources>
														</TextBlock>
														<DataTemplate.Triggers>
															<DataTrigger Binding="{Binding ChangesUnsaved}" Value="True">
																<Setter TargetName="headerText" Property="Foreground" Value="#FF459727" />
																<Setter TargetName="headerText" Property="FontWeight" Value="Bold" />
																<Setter TargetName="headerText" Property="FontStyle" Value="Italic" />
															</DataTrigger>
														</DataTemplate.Triggers>
													</DataTemplate>
													<DataTemplate x:Key="EditingTabText">
														<c:UnfocusableTextBox
															x:Name="FileTabRenamingTextBox"
															Margin="4,0,0,0"
															HorizontalAlignment="Left"
															DataContext="{Binding}"
															KeyDown="TextBox_KeyDown_MoveFocus"
															Tag="{Binding Path=DataContext, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
															Text="{Binding RenameText, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
															TextAlignment="Left"
															ToolTip="Renaming">
															<c:UnfocusableTextBox.ContextMenu>
																<ContextMenu>
																	<MenuItem Command="ApplicationCommands.Cut" />
																	<MenuItem Command="ApplicationCommands.Copy" />
																	<MenuItem Command="ApplicationCommands.Paste" />
																	<MenuItem Command="ApplicationCommands.SelectAll" />
																</ContextMenu>
															</c:UnfocusableTextBox.ContextMenu>
														</c:UnfocusableTextBox>
													</DataTemplate>
													<Style x:Key="FileTabContentStyle" TargetType="{x:Type ContentPresenter}">
														<Setter Property="ContentTemplate" Value="{StaticResource DefaultTabText}" />
														<Style.Triggers>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding CanRename}" Value="True" />
																	<Condition Binding="{Binding IsRenaming}" Value="False" />
																</MultiDataTrigger.Conditions>
																<MultiDataTrigger.Setters>
																	<Setter Property="ContentTemplate" Value="{StaticResource CustomTabText}" />
																</MultiDataTrigger.Setters>
															</MultiDataTrigger>
															<MultiDataTrigger>
																<MultiDataTrigger.Conditions>
																	<Condition Binding="{Binding CanRename}" Value="True" />
																	<Condition Binding="{Binding IsRenaming}" Value="True" />
																</MultiDataTrigger.Conditions>
																<MultiDataTrigger.Setters>
																	<Setter Property="ContentTemplate" Value="{StaticResource EditingTabText}" />
																</MultiDataTrigger.Setters>
															</MultiDataTrigger>
														</Style.Triggers>
													</Style>
												</Grid.Resources>
												<Grid.ColumnDefinitions>
													<ColumnDefinition Width="*" SharedSizeGroup="FileTabText" />
													<ColumnDefinition Width="Auto" />
												</Grid.ColumnDefinitions>
												<c:ImageButton
													x:Name="CloseFileTabButton"
													Grid.Column="1"
													Margin="4,0,-4,0"
													HorizontalAlignment="Right"
													Panel.ZIndex="2"
													Command="{Binding Path=DataContext.CloseFileCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}"
													CommandParameter="{Binding}"
													MaxSize="10"
													Source="{x:Static vdata:IconPathData.Close1}"
													ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_CloseFileTab}"
													Visibility="{Binding CanClose, Converter={StaticResource BoolToVisibilityConverter}, FallbackValue=Collapsed}" />
												<ContentPresenter
													x:Name="FileTabContentPresenter"
													Grid.Column="0"
													Content="{Binding}"
													Style="{StaticResource FileTabContentStyle}" />
												<i:Interaction.Triggers>
													<i:EventTrigger EventName="LostFocus">
														<i:InvokeCommandAction Command="{Binding Path=DataContext.CancelRenamingFileTabCommand, RelativeSource={RelativeSource AncestorType={x:Type Window}}}" CommandParameter="{Binding}" />
													</i:EventTrigger>
												</i:Interaction.Triggers>
											</Grid>
										</DataTemplate>
									</Setter.Value>
								</Setter>
							</Style>
						</TabControl.Resources>

					</TabControl>
				</Grid>
			</DataTemplate>
			<DataTemplate x:Key="LocaleGroupTab">
				<TabItem Header="{Binding Name}" Visibility="{Binding Visibility, Converter={StaticResource BoolToVisibilityConverter}}" />
			</DataTemplate>
		</ResourceDictionary>
	</Window.Resources>
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition Height="Auto" />
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<Grid
			x:Name="NameNewFileTabGrid"
			Grid.Row="0"
			Grid.RowSpan="4"
			HorizontalAlignment="Stretch"
			VerticalAlignment="Stretch"
			Panel.ZIndex="1"
			Visibility="{Binding IsAddingNewFileTab, Converter={StaticResource BoolToVisibilityConverter}, FallbackValue=Collapsed}">
			<Grid.Resources>
				<Style TargetType="TextBox">
					<Setter Property="Effect">
						<Setter.Value>
							<DropShadowEffect
								BlurRadius="8"
								Direction="-20"
								RenderingBias="Quality"
								ShadowDepth="4" />
						</Setter.Value>
					</Setter>
				</Style>
			</Grid.Resources>
			<Rectangle Fill="DarkGray" Opacity="0.75" />
			<Border
				x:Name="NameTabBorder"
				Margin="4"
				Padding="32"
				HorizontalAlignment="Center"
				VerticalAlignment="Center"
				Background="#FFD6D9DE"
				BorderBrush="Gray"
				BorderThickness="1">
				<StackPanel Width="300" VerticalAlignment="Stretch">
					<TextBlock
						Margin="0,0,0,4"
						VerticalAlignment="Center"
						Text="Target Project:" />
					<ComboBox
						Margin="0"
						DisplayMemberPath="DisplayName"
						ItemsSource="{Binding LinkedProjects}"
						SelectedIndex="{Binding NewFileTargetProjectIndex, Mode=TwoWay, FallbackValue=0}" />
					<TextBlock Margin="0,4,0,0" Text="Tab Name:" />
					<c:UnfocusableTextBox
						Margin="0,4,0,0"
						AcceptsReturn="False"
						AcceptsTab="False"
						MaxLines="1"
						Text="{Binding NewFileTabName, Mode=TwoWay}" />
					<StackPanel
						Margin="4,8,4,4"
						HorizontalAlignment="Right"
						Orientation="Horizontal">
						<StackPanel.Resources>
							<Style TargetType="{x:Type Button}">
								<Setter Property="Margin" Value="6,2,6,2" />
								<Setter Property="Width" Value="48" />
								<Setter Property="Effect">
									<Setter.Value>
										<DropShadowEffect
											BlurRadius="10"
											Direction="-20"
											Opacity="0.8"
											RenderingBias="Quality"
											ShadowDepth="6" />
									</Setter.Value>
								</Setter>
							</Style>
						</StackPanel.Resources>
						<Button
							Background="#FFC7FBC7"
							Command="{Binding ConfirmFileAddToGroupCommand}"
							Content="OK" />
						<Button
							Background="#FFF7BEBE"
							Command="{Binding CancelFileAddToGroupCommand}"
							Content="Cancel" />
					</StackPanel>
				</StackPanel>
				<Border.Effect>
					<DropShadowEffect
						BlurRadius="15"
						Direction="-20"
						RenderingBias="Quality"
						ShadowDepth="4" />
				</Border.Effect>
			</Border>
		</Grid>
		<DockPanel Grid.Row="0" Background="Transparent">
			<Menu
				MinHeight="10"
				Margin="0"
				Padding="0"
				Background="Transparent"
				DockPanel.Dock="Top"
				ItemContainerTemplateSelector="{StaticResource MenuItemContainerTemplateSelector}"
				ItemsSource="{Binding MenuData.Menus}"
				UsesItemContainerTemplate="True" />
		</DockPanel>
		<Grid
			Grid.Row="1"
			Grid.Column="1"
			Height="Auto"
			Margin="4,2,2,2"
			Background="Transparent">
			<Grid.Resources>
				<Style TargetType="StackPanel">
					<Setter Property="Background" Value="Transparent" />
					<Setter Property="Orientation" Value="Horizontal" />
					<Setter Property="HorizontalAlignment" Value="Left" />
				</Style>
				<Style BasedOn="{StaticResource DefaultImageButtonStyle}" TargetType="{x:Type c:ImageButton}">
					<Setter Property="Margin" Value="2" />
				</Style>
			</Grid.Resources>
			<StackPanel
				x:Name="ShortcutsButtonPanel"
				Grid.Column="0"
				MinHeight="16"
				Margin="2"
				VerticalAlignment="Center">
				<c:ImageButton
					x:Name="AddFileButton"
					cb:ImageButtonHoverOnDisabled.Enable="True"
					Command="{Binding AddFileCommand}"
					Source="{x:Static vdata:IconPathData.AddFile}"
					ToolTip_Disabled="{x:Static core:DOS2DETooltips.Button_Locale_AddFile_Disabled}"
					ToolTip_Enabled="{x:Static core:DOS2DETooltips.Button_Locale_AddFile}" />
				<c:ImageButton
					x:Name="ImportFileButton"
					cb:ImageButtonHoverOnDisabled.Enable="True"
					Command="{Binding ImportFileCommand}"
					Source="{x:Static vdata:IconPathData.ImportFile}"
					ToolTip_Disabled="{x:Static core:DOS2DETooltips.Button_Locale_ImportFile_Disabled}"
					ToolTip_Enabled="{x:Static core:DOS2DETooltips.Button_Locale_ImportFile}" />
				<c:ImageButton
					x:Name="SaveButton"
					cb:ImageButtonHoverOnDisabled.Enable="True"
					Command="{Binding SaveCurrentCommand}"
					IsEnabled="{Binding CanSave}"
					Source="{x:Static vdata:IconPathData.Save}"
					ToolTip_Disabled="{x:Static core:DOS2DETooltips.Button_Locale_SaveCurrent_Disabled}"
					ToolTip_Enabled="{x:Static core:DOS2DETooltips.Button_Locale_SaveCurrent}" />
				<c:ImageButton
					x:Name="SaveAllButton"
					Command="{Binding SaveAllCommand}"
					Source="{x:Static vdata:IconPathData.SaveAll}"
					ToolTip="{x:Static core:DOS2DETooltips.Button_Locale_SaveAll}" />
				<!--<Rectangle Style="{StaticResource VerticalSeparator}" />-->
			</StackPanel>
		</Grid>
		<Grid
			x:Name="RemovedEntriesGrid"
			Grid.Row="2"
			Panel.ZIndex="99"
			d:DataContext="{d:DesignInstance local:LocaleEditorDebugViewModel,
			                                 IsDesignTimeCreatable=true}"
			Visibility="{Binding MissingEntriesViewVisible, FallbackValue=Collapsed}">
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="*" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<Rectangle Grid.RowSpan="3">
				<Rectangle.Fill>
					<SolidColorBrush Color="#F2FFFFFF" />
				</Rectangle.Fill>
			</Rectangle>
			<Rectangle Grid.Row="0" Fill="#FFFFDDDD" />
			<StackPanel
				Margin="8"
				HorizontalAlignment="Center"
				Background="Transparent"
				Orientation="Vertical">
				<TextBlock
					FontFamily="Arial"
					FontSize="18"
					FontWeight="Bold"
					Foreground="#FFFF3232"
					Text="{Binding ProblemEntriesViewHeaderText}"
					TextAlignment="Center">
					<TextBlock.Effect>
						<DropShadowEffect
							BlurRadius="4"
							Direction="-50"
							Opacity="0.25"
							RenderingBias="Quality"
							ShadowDepth="4" />
					</TextBlock.Effect>
				</TextBlock>
				<TextBlock Text="{Binding ProblemEntriesViewInfoText1}" TextAlignment="Center" />
				<TextBlock Text="{Binding ProblemEntriesViewInfoText2}" TextAlignment="Center" />
			</StackPanel>

			<ListView
				x:Name="RemovedEntriesListView"
				Grid.Row="1"
				Background="Transparent"
				BorderThickness="0"
				GridViewColumnHeader.Click="RemovedEntriesListView_Click"
				ItemsSource="{Binding MissingEntries}"
				SelectionChanged="RemovedEntriesListView_SelectionChanged"
				SelectionMode="Extended">
				<ListView.Resources>
					<Style TargetType="TextBlock">
						<Setter Property="TextAlignment" Value="Left" />
					</Style>
					<Style TargetType="TextBox">
						<Setter Property="TextAlignment" Value="Left" />
					</Style>
				</ListView.Resources>
				<ListView.ItemContainerStyle>
					<Style TargetType="ListViewItem">
						<Setter Property="IsSelected" Value="{Binding Selected}" />
					</Style>
				</ListView.ItemContainerStyle>
				<ListView.View>
					<GridView>
						<GridView.ColumnHeaderContainerStyle>
							<Style TargetType="{x:Type GridViewColumnHeader}">
								<Setter Property="HorizontalContentAlignment" Value="Left" />
								<Setter Property="Padding" Value="10,0" />
								<Setter Property="BorderThickness" Value="0" />
							</Style>
						</GridView.ColumnHeaderContainerStyle>
						<GridViewColumn Width="Auto">
							<GridViewColumn.Header>
								<CheckBox
									x:Name="RemovedEntriesListViewCheckboxHeader"
									Checked="RemovedEntriesListViewCheckboxHeader_Checked"
									Unchecked="RemovedEntriesListViewCheckboxHeader_Checked" />
							</GridViewColumn.Header>
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<CheckBox IsChecked="{Binding Selected}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</GridViewColumn>
						<GridViewColumn Width="Auto" Header="File">
							<GridViewColumn.CellTemplate>
								<DataTemplate>
									<TextBlock Text="{Binding Parent.Name}" ToolTip="{Binding Parent.SourcePath}" />
								</DataTemplate>
							</GridViewColumn.CellTemplate>
						</GridViewColumn>
						<GridViewColumn
							Width="Auto"
							DisplayMemberBinding="{Binding EntryKey}"
							Header="Key" />
						<GridViewColumn DisplayMemberBinding="{Binding EntryContent}" Header="Content" />
						<GridViewColumn DisplayMemberBinding="{Binding EntryHandle}" Header="Handle" />
					</GridView>
				</ListView.View>
			</ListView>
			<Rectangle Grid.Row="2" Fill="WhiteSmoke" />
			<Grid
				Grid.Row="2"
				Margin="4,0"
				HorizontalAlignment="Left">
				<Grid.ColumnDefinitions>
					<ColumnDefinition />
					<ColumnDefinition Width="80" />
					<ColumnDefinition />
				</Grid.ColumnDefinitions>
				<Grid.Resources>
					<Style TargetType="Button">
						<Setter Property="Margin" Value="2" />
						<Setter Property="Padding" Value="8,2,8,2" />
					</Style>
				</Grid.Resources>
				<StackPanel Grid.Column="0" Orientation="Horizontal">
					<Button x:Name="CopySimpleMissingEntriesButton" Content="Copy Key &#38; Content" />
					<Button x:Name="CopyAllDataMissingEntriesButton" Content="Copy All" />
				</StackPanel>
				<StackPanel Grid.Column="2" Orientation="Horizontal">
					<Button x:Name="ConfirmRemovedEntriesButton" Content="Removed Selected" />
					<Button x:Name="CancelRemovedEntriesButton" Content="Cancel &#38; Close" />
				</StackPanel>
			</Grid>

		</Grid>
		<TabControl
			x:Name="MainTabControl"
			Grid.Row="2"
			cb:TabContent.IsCached="True"
			cb:TabContent.Template="{Binding Source={StaticResource LocaleFileTabs}}"
			ItemsSource="{Binding VisibleGroups}"
			SelectedIndex="{Binding SelectedGroupIndex}"
			SelectionChanged="LocaleGroupTabControl_SelectionChanged"
			Style="{StaticResource LocaleGroupTabControl}">
			<TabControl.ItemContainerStyle>
				<Style TargetType="TabItem">
					<Setter Property="Visibility" Value="{Binding Visibility, Converter={StaticResource BoolToVisibilityConverter}}" />
					<Setter Property="Header" Value="{Binding Name}" />
				</Style>
			</TabControl.ItemContainerStyle>
		</TabControl>
		<Grid x:Name="FooterGrid" Grid.Row="3">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="90" MaxWidth="90" />
				<ColumnDefinition Width="*" />
			</Grid.ColumnDefinitions>
			<Border
				Grid.Column="0"
				BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
				BorderThickness="1,1,0,1">
				<TextBlock
					x:Name="FooterOuputTextboxDate"
					Margin="4,0,4,0"
					Background="{x:Null}"
					Text="{Binding OutputDate}"
					TextAlignment="Center" />
			</Border>
			<Border
				Grid.Column="1"
				BorderBrush="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}"
				BorderThickness="1">
				<TextBlock
					x:Name="FooterOuputTextboxText"
					Margin="4,0,4,0"
					Padding="0"
					Background="{x:Null}"
					Foreground="{Binding OutputType, Converter={StaticResource FooterOutputColorConverter}}"
					Text="{Binding OutputText}"
					TextAlignment="Left"
					TextTrimming="CharacterEllipsis"
					ToolTip="{Binding OutputText}" />
			</Border>
		</Grid>
		<!--<xctk:WindowContainer>
			<xctk:ChildWindow x:Name="ContentWindow" Caption="Content" Width="800" Height="600" IsModal="False">
				<TextBlock Text="{Binding Source=SelectedEntry, Path=EntryContent, Mode=TwoWay, TargetNullValue='null', FallbackValue='test'}" />
			</xctk:ChildWindow>
		</xctk:WindowContainer>-->
		<Grid Grid.RowSpan="4" Visibility="{Binding LockScreenVisibility, FallbackValue=Collapsed}">
			<Grid.Background>
				<SolidColorBrush Opacity="0.9" Color="{DynamicResource {x:Static SystemColors.ActiveBorderColorKey}}" />
			</Grid.Background>
			<Rectangle
				Width="400"
				Height="100"
				HorizontalAlignment="Center"
				VerticalAlignment="Center"
				Fill="WhiteSmoke" />
			<StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
				<TextBlock
					Padding="10"
					HorizontalAlignment="Center"
					FontSize="20"
					Text="Locked" />
				<TextBlock
					Padding="10"
					FontSize="12"
					Text="Please wait while the main window finishes its task." />
			</StackPanel>
		</Grid>
	</Grid>
</reactiveui:ReactiveWindow>
